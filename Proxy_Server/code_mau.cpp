// testProxy.cpp : Defines the entry point for the console application.//#include "stdafx.h"#include "testProxy.h"#include <afxsock.h>#include <iostream>#include<string>using namespace std;#ifdef _DEBUG#define new DEBUG_NEW#endif// The one and only application objectCWinApp theApp;using namespace std;//hàm này lấy trong demo của thầy, lấy ip của host truyền vàostring getIpByHostName(const char* host){	struct hostent *hent;	int iplen = 15; //XXX.XXX.XXX.XXX	char *ip = (char *)malloc(iplen + 1);	memset(ip, 0, iplen + 1);	if ((hent = gethostbyname(host)) == NULL){		return "NULL";	}	if (inet_ntop(AF_INET, (void *)hent->h_addr_list[0], ip, iplen) == NULL){		return "NULL";	}	return string(ip);}wchar_t* convertCharArrayToLPCWSTR(const char* charArray){	wchar_t* wString = new wchar_t[4096];	MultiByteToWideChar(CP_ACP, 0, charArray, -1, wString, 4096);	return wString;}DWORD WINAPI proxyHandler(LPVOID arg){	SOCKET* hConnected = (SOCKET*)arg;	CSocket connector;	//change to CSocket	connector.Attach(*hConnected);	int size = 10000;	char* tmp = new char[size + 1];	size = connector.Receive(tmp, size, 0);	tmp[size + 1] = '\0';	string request = string(tmp, size);	cout << request << endl;	string host = "";	int i1 = request.find("Host:");	host = request.substr(i1 + 6);	//cout << "Host1: " << host << endl;	int i2 = host.find("\r\n");	host = host.substr(0, i2);	cout << "Host: " << host << endl;	string ip = getIpByHostName(host.c_str());	cout << "IP: " << ip << endl;	CSocket ProxyWebServer;	if (ProxyWebServer.Create()<0){		cout << "bug create proxyWebServer" << endl;		return 0;	}	if (ProxyWebServer.Connect(convertCharArrayToLPCWSTR(ip.c_str()), 80)<0){		cout << "connect webserver fail " << endl;		return 0;	}	int tmpRes = 0;	tmpRes = ProxyWebServer.Send(request.c_str(), request.size());	char bufReceive[10000];	string response = "";	if (tmpRes > 0){		while (tmpRes > 0){			tmpRes = ProxyWebServer.Receive(bufReceive, 10000, 0);			response += string(bufReceive, tmpRes);		}	}	else{		cout << "Khong gui duoc request!!!" << endl;		return 0;	}	//cout << "Response: " << endl << response << endl;	connector.Send(response.c_str(), response.size());	return 0;}int _tmain(int argc, TCHAR* argv[], TCHAR* envp[]){	int nRetCode = 0;	HMODULE hModule = ::GetModuleHandle(NULL);	if (hModule != NULL)	{		// initialize MFC and print and error on failure		if (!AfxWinInit(hModule, NULL, ::GetCommandLine(), 0))		{			// TODO: change error code to suit your needs			_tprintf(_T("Fatal Error: MFC initialization failed\n"));			nRetCode = 1;		}		else		{			// Khoi tao thu vien Socket			if (AfxSocketInit() == FALSE){				cout << "can't init Socket Libraray";				return FALSE;			}			CSocket ProxyServer;			if (ProxyServer.Create(8888, SOCK_STREAM, NULL)){				cout << "Proxy ok" << endl;			}			else{				cout << "proxy fail" << endl;			}			ProxyServer.Listen(100);			CSocket connector;			DWORD threadID;			HANDLE threadStatus;			do{				try{					if (ProxyServer.Accept(connector)){						SOCKET* hConnected = new SOCKET();						//change CSocket to Socket						*hConnected = connector.Detach();						//đưa connector vào thread xử lý						threadStatus = CreateThread(NULL, 0, proxyHandler, hConnected, 0, &threadID);					}					else{						cout << "Bug: accept fail!!!" << endl;						continue;					}				}				catch (exception e){					cout << "Bug: accept connector: " << e.what() << endl;					continue;				}			} while (true);			// TODO: code your application's behavior here.		}	}	else	{		// TODO: change error code to suit your needs		_tprintf(_T("Fatal Error: GetModuleHandle failed\n"));		nRetCode = 1;	}	return nRetCode;}